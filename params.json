{"name":"Kdbplus","tagline":"A repository for q/kdb+ programs.","body":"kdbplus\r\n=======\r\n\r\nA repository for q/kdb+ programs. For more details on q/kdb+ visit www.kx.com.\r\n\r\n_Keywords: Binomial Model, Black-Scholes Equation, Options Pricing, Risk Neutral Distribution, Physical Distribution, Statistics, Portfolio Tracking, Tickerplant, Web Socket._\r\n\r\nHere are list of some of the projects under kdbplus repository:\r\n\r\n1. Binary and Barrier Options Pricing.\r\n  * Here we tried to price two types of options. The Higher and the No Touch which are available\r\n    on binary.com website. \r\n  * Volatility are considered to be constant. Here I used Implied Volatility calibrated based on price \r\n   available from binary.com website.\r\n  * 1-month LIBOR is used as risk free rate.\r\n  * FX rates data is sourced from Yahoo Finance.\r\n  * Communication between back end and front end is done using Web Socket. \r\n\r\n  References:\r\n\r\n  - Derman, Emanuel, and lraj Kani. \"The Ins and Outs of\r\n    Barrier Option: Part 2.\" Derivatives Quarterly, Winrcr 96\r\n    URL: http://www.emanuelderman.com/media/insoutbarriers2.pdf\r\n\r\n2. Implied Risk Neutral Distribution.\r\n  * Computation of Implied Risk Neutral Distribution by recovering from index option prices.\r\n  * Here I use Nikkei 225 Options data available from Osaka Stock Exchange (OSE) website.\r\n  \r\n  References:\r\n\r\n  - Shimko, David C(1993): \"Bounds of Probability\", Risk, 6, 33-7\r\n  \r\n  Screenshot:\r\n\r\n  ![irnd](https://cloud.githubusercontent.com/assets/9425771/6879928/705e4738-d550-11e4-94e0-c41d9e95eeec.png)\r\n  \r\n3. Portfolio Tracker.\r\n  * Demonstrate the use of feed handler, tickerplant as well as tick subscriber.\r\n  * Market data is sourced from Yahoo Finance. Please note that it is a delayed tick data.\r\n  * A feed handler based on Random Walk Simulation is also available so that application can be tested\r\n    during market close. This simulator can be found under feedHandler/randomWalkSim directory.\r\n    The file is feedsimR.q.\r\n  * PnL is calculated based on the difference between average bought/sold price and last price.\r\n  * Charts are rendered using Google Chart Api.\r\n  * Web Socket is used to push data to GUI.\r\n  \r\n  Screenshot:\r\n  ![ptr](https://cloud.githubusercontent.com/assets/9425771/6880569/4fe2dc9e-d573-11e4-84ae-b3522efe7696.png)\r\n\r\n4. Physical Distribution Estimation.\r\n  * An estimation of physical distribution based on historical data using Gaussian Kernel.\r\n  * Here I am using Nikkei 225 daily historical data for year 2014. This data was downloaded\r\n    from Yahoo Finance.\r\n\r\n  Screenshot:\r\n  ![gaussian](https://cloud.githubusercontent.com/assets/9425771/6885618/07ca59a8-d65b-11e4-86db-5858c1bee709.png)\r\n\r\n5. BS Model Viewer.\r\n  * A graphical viewer for Black-Scholes model for European Call Option.\r\n  * The GUI allows user to change parameters and see how the Greek letters change.\r\n  \r\n  Screenshot:\r\n  ![bs](https://cloud.githubusercontent.com/assets/9425771/6935038/ceeeed8e-d870-11e4-8adf-d0f5421c24f1.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}